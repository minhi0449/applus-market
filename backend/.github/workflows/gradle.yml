name: Java CI with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build

      - name: Get JAR_FILE
        id: jarfile
        run: |
          JAR_FILE=$(ls build/libs/*.jar | grep -v plain | head -n 1)
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      - name: Upload build artifact
        uses:  actions/upload-artifact@v4
        with:
          name: app
          path: ${{ env.JAR_FILE }}

      

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: build/libs/
          
      - name: List files in build/libs
        run: ls -al build/libs/
      - name: Display directory tree
        run: |
          sudo apt-get install -y tree
          tree -L 3
      - name: Display environment variables
        run: env
      
        
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_KEY }}
      - name: Add Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa,ed25519 -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
      # - name: Add Host to Known Hosts
      #   run: |
      #     mkdir -p ~/.ssh
      #     HOST_KEYS=$(ssh-keyscan -t rsa,ecdsa,ed25519 -H ${{ secrets.AWS_EC2_HOST }})
      #     echo "$HOST_KEYS" >> ~/.ssh/known_hosts
      #     echo "::add-mask::$HOST_KEYS"


      - name: Copy JAR to EC2
        run: |
          JAR_FILE=$(ls -t build/libs/*.jar | head -n 1)
          echo "=== DEBUG: Selected JAR_FILE is $JAR_FILE ==="
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            $JAR_FILE \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/
      
      - name : Link to latest.jar 
        run: |
          ssh \
            -o StrictHostKeyChecking=no \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            JAR_FILE=\$(ls -t /home/ec2-user/Aplusmarket-*.jar | head -n 1)
            ln -sfn \$JAR_FILE /home/ec2-user/Aplusmarket-latest.jar
          EOF
      
      - name: Deploy New Version with Blue-Green Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
          set -e
                  

          # 현재 실행 중인 포트 확인
          CURRENT_PORT=""
          if sudo systemctl is-active --quiet my-spring-app-1; then
              echo "8081 서비스 실행 중!"
              CURRENT_PORT=8081
          elif sudo systemctl is-active --quiet my-spring-app-2; then
              echo "8082 서비스 실행 중!"
              CURRENT_PORT=8082
          else
              echo "ERROR: Both services are inactive! Defaulting to 8081."
              CURRENT_PORT=8081
          fi
          echo "=== DEBUG: Current running port is: \$CURRENT_PORT ==="


          # CURRENT_PORT=\$(sudo systemctl is-active my-spring-app-1 && echo "8081" || (sudo systemctl is-active my-spring-app-2 && echo "8082"))

          # 현재 실행 중인 포트가 8081이면, 새 JAR을 8082에서 실행, 반대의 경우 8081에서 실행
          if [ "\$CURRENT_PORT" == "8081" ]; then
              NEW_PORT=8082
              OLD_SERVICE="my-spring-app-1"
              NEW_SERVICE="my-spring-app-2"
          else
              NEW_PORT=8081
              OLD_SERVICE="my-spring-app-2"
              NEW_SERVICE="my-spring-app-1"
          fi
          echo "New application will run on port: \$NEW_PORT"

          # 기존 서비스 중지
          sudo systemctl stop \$NEW_SERVICE || true

          # 최신 JAR 파일 찾기 및 이름 변경
          LATEST_JAR=\$(ls -t /home/ec2-user/*.jar | head -n 1)
          NEW_JAR_NAME="/home/ec2-user/Aplusmarket-\$NEW_PORT.jar"
          mv "\$LATEST_JAR" "\$NEW_JAR_NAME"
          
          # LATEST_JAR=\$(ls -t /home/ec2-user/*.jar | head -n 1)
          # mv "\$LATEST_JAR" "/home/ec2-user/Aplusmarket-\$NEW_PORT.jar"


          # systemd 서비스 업데이트
          sudo sed -i "s|ExecStart=.*|ExecStart=/usr/bin/java -jar \$NEW_JAR_NAME|" /etc/systemd/system/\$NEW_SERVICE.service
          sudo sed -i "s|Environment=.*|Environment=\"SERVER_PORT=\$NEW_PORT\"|" /etc/systemd/system/\$NEW_SERVICE.service
        
          # systemd 재로드 후 새로운 서비스 시작
          sudo systemctl daemon-reload
          sudo systemctl start \$NEW_SERVICE
          sleep 10

          # 애플리케이션 상태 확인 (최대 30번 반복, 5초 간격)
          echo "Waiting for new application to start..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:\$NEW_PORT/actuator/health | grep -q 'UP'; then
              echo "Application started successfully!"
              SUCCESS=true
              break
            fi
            echo " Waiting for application to be ready... ($i/30)"
            sleep 5
          done
          
          # DOWN 상태 처리
          # if [ -z "$SUCCESS" ]; then
          #   echo "ERROR: New application failed to start on port \$NEW_PORT"
            
          #   # 롤백 로직 (이전 버전으로 트래픽 재전환)
          #   # DOWN 상태 처리
          #   if [ -z "$SUCCESS" ]; then
          #     echo "ERROR: New application failed to start on port \$NEW_PORT"
              
          #     # 롤백 로직 (이전 버전으로 트래픽 재전환)
          #     echo "Rolling back to previous version running on port \$CURRENT_PORT..."
          #     sudo sed -i "s|proxy_pass http://.*|proxy_pass http://127.0.0.1:\$CURRENT_PORT;|" /etc/nginx/nginx.conf
          #     sudo nginx -s reload
  
          #     echo "Stopping failed new application: \$NEW_SERVICE"
          #     sudo systemctl stop \$NEW_SERVICE || true
  
          #     echo "Deployment failed. Rolled back to previous version on port \$CURRENT_PORT."
          #     exit 1  
          #   fi

          # fi

          # Nginx 업데이트 및 reload
          echo "New application port: \$NEW_PORT"
          sudo sed -i "s|proxy_pass http://.*|proxy_pass http://127.0.0.1:\$NEW_PORT;|" /etc/nginx/nginx.conf
          sudo nginx -s reload
          
          echo "Deployment successful! Traffic switched to port \$NEW_PORT"
        

          # 기존 서비스 종료 (새로운 서비스가 정상 실행된 후)
           if [ "\$NEW_PORT" == "8081" ]; then
             sudo systemctl stop my-spring-app-2.service || true
          else
             sudo systemctl stop my-spring-app-1.service || true
          fi
          # echo "Stopping old service: \$OLD_SERVICE"
          # sudo systemctl stop \$OLD_SERVICE || true
          
          echo "Deployment successful! Traffic switched to port \$NEW_PORT"
          EOF

      

      # 실패시 이전 버전으로 롤백 가능하도록 하는것 
      # - name: Rollback to Previous Version
      #   if: failure()
      #   run: |
      #     ssh \
      #       -o StrictHostKeyChecking=yes \
      #       ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
      #       PREV_JAR_FILE=\$(ls -t /home/ec2-user/*.jar | head -n 2 | tail -n 1)
      #       ln -sfn \$PREV_JAR_FILE /home/ec2-user/Aplusmarket-latest.jar
      #       sudo systemctl restart my-spring-app
      #     EOF
